{"ast":null,"code":"import React, { useRef } from 'react';\nimport { useDrag } from '@use-gesture/react';\nvar classPrefix = \"adm-slider\";\n\nvar Thumb = function Thumb(props) {\n  var value = props.value,\n      min = props.min,\n      max = props.max,\n      disabled = props.disabled,\n      onDrag = props.onDrag;\n  var prevValue = useRef(value);\n\n  var currentPosition = function currentPosition() {\n    return {\n      left: (value - min) / (max - min) * 100 + \"%\",\n      right: 'auto'\n    };\n  };\n\n  var bind = useDrag(function (state) {\n    var _a;\n\n    if (disabled) return;\n\n    if (state.first) {\n      prevValue.current = value;\n    }\n\n    var x = state.xy[0] - state.initial[0];\n    var sliderOffsetWith = (_a = props.trackRef.current) === null || _a === void 0 ? void 0 : _a.offsetWidth;\n    if (!sliderOffsetWith) return;\n    var diff = x / Math.ceil(sliderOffsetWith) * (max - min);\n    onDrag(prevValue.current + diff, state.first, state.last);\n  }, {\n    axis: 'x',\n    pointer: {\n      touch: true\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    className: classPrefix + \"-thumb-container\",\n    style: currentPosition()\n  }, bind()), /*#__PURE__*/React.createElement(\"div\", {\n    className: classPrefix + \"-thumb\"\n  }));\n};\n\nexport default Thumb;","map":{"version":3,"sources":["/Users/brandonliu/Project/goairmart/antd-demo/node_modules/antd-mobile/es/components/slider/thumb.js"],"names":["React","useRef","useDrag","classPrefix","Thumb","props","value","min","max","disabled","onDrag","prevValue","currentPosition","left","right","bind","state","_a","first","current","x","xy","initial","sliderOffsetWith","trackRef","offsetWidth","diff","Math","ceil","last","axis","pointer","touch","createElement","Object","assign","className","style"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,IAAIC,WAAW,GAAG,YAAlB;;AAEA,IAAIC,KAAK,GAAG,SAASA,KAAT,CAAeC,KAAf,EAAsB;AAChC,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;AAAA,MACIC,GAAG,GAAGF,KAAK,CAACE,GADhB;AAAA,MAEIC,GAAG,GAAGH,KAAK,CAACG,GAFhB;AAAA,MAGIC,QAAQ,GAAGJ,KAAK,CAACI,QAHrB;AAAA,MAIIC,MAAM,GAAGL,KAAK,CAACK,MAJnB;AAKA,MAAIC,SAAS,GAAGV,MAAM,CAACK,KAAD,CAAtB;;AAEA,MAAIM,eAAe,GAAG,SAASA,eAAT,GAA2B;AAC/C,WAAO;AACLC,MAAAA,IAAI,EAAE,CAACP,KAAK,GAAGC,GAAT,KAAiBC,GAAG,GAAGD,GAAvB,IAA8B,GAA9B,GAAoC,GADrC;AAELO,MAAAA,KAAK,EAAE;AAFF,KAAP;AAID,GALD;;AAOA,MAAIC,IAAI,GAAGb,OAAO,CAAC,UAAUc,KAAV,EAAiB;AAClC,QAAIC,EAAJ;;AAEA,QAAIR,QAAJ,EAAc;;AAEd,QAAIO,KAAK,CAACE,KAAV,EAAiB;AACfP,MAAAA,SAAS,CAACQ,OAAV,GAAoBb,KAApB;AACD;;AAED,QAAIc,CAAC,GAAGJ,KAAK,CAACK,EAAN,CAAS,CAAT,IAAcL,KAAK,CAACM,OAAN,CAAc,CAAd,CAAtB;AACA,QAAIC,gBAAgB,GAAG,CAACN,EAAE,GAAGZ,KAAK,CAACmB,QAAN,CAAeL,OAArB,MAAkC,IAAlC,IAA0CF,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAACQ,WAA7F;AACA,QAAI,CAACF,gBAAL,EAAuB;AACvB,QAAIG,IAAI,GAAGN,CAAC,GAAGO,IAAI,CAACC,IAAL,CAAUL,gBAAV,CAAJ,IAAmCf,GAAG,GAAGD,GAAzC,CAAX;AACAG,IAAAA,MAAM,CAACC,SAAS,CAACQ,OAAV,GAAoBO,IAArB,EAA2BV,KAAK,CAACE,KAAjC,EAAwCF,KAAK,CAACa,IAA9C,CAAN;AACD,GAdiB,EAcf;AACDC,IAAAA,IAAI,EAAE,GADL;AAEDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE;AADA;AAFR,GAde,CAAlB;AAoBA,SAAO,aAAahC,KAAK,CAACiC,aAAN,CAAoB,KAApB,EAA2BC,MAAM,CAACC,MAAP,CAAc;AAC3DC,IAAAA,SAAS,EAAEjC,WAAW,GAAG,kBADkC;AAE3DkC,IAAAA,KAAK,EAAEzB,eAAe;AAFqC,GAAd,EAG5CG,IAAI,EAHwC,CAA3B,EAGR,aAAaf,KAAK,CAACiC,aAAN,CAAoB,KAApB,EAA2B;AAClDG,IAAAA,SAAS,EAAEjC,WAAW,GAAG;AADyB,GAA3B,CAHL,CAApB;AAMD,CAzCD;;AA2CA,eAAeC,KAAf","sourcesContent":["import React, { useRef } from 'react';\nimport { useDrag } from '@use-gesture/react';\nvar classPrefix = \"adm-slider\";\n\nvar Thumb = function Thumb(props) {\n  var value = props.value,\n      min = props.min,\n      max = props.max,\n      disabled = props.disabled,\n      onDrag = props.onDrag;\n  var prevValue = useRef(value);\n\n  var currentPosition = function currentPosition() {\n    return {\n      left: (value - min) / (max - min) * 100 + \"%\",\n      right: 'auto'\n    };\n  };\n\n  var bind = useDrag(function (state) {\n    var _a;\n\n    if (disabled) return;\n\n    if (state.first) {\n      prevValue.current = value;\n    }\n\n    var x = state.xy[0] - state.initial[0];\n    var sliderOffsetWith = (_a = props.trackRef.current) === null || _a === void 0 ? void 0 : _a.offsetWidth;\n    if (!sliderOffsetWith) return;\n    var diff = x / Math.ceil(sliderOffsetWith) * (max - min);\n    onDrag(prevValue.current + diff, state.first, state.last);\n  }, {\n    axis: 'x',\n    pointer: {\n      touch: true\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    className: classPrefix + \"-thumb-container\",\n    style: currentPosition()\n  }, bind()), /*#__PURE__*/React.createElement(\"div\", {\n    className: classPrefix + \"-thumb\"\n  }));\n};\n\nexport default Thumb;"]},"metadata":{},"sourceType":"module"}