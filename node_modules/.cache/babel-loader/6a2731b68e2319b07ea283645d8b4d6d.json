{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { getTargetElement } from '../utils/dom';\n\nfunction useEventListener(eventName, handler, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var handlerRef = useRef();\n  handlerRef.current = handler;\n  useEffect(function () {\n    var targetElement = getTargetElement(options.target, window);\n\n    if (!targetElement.addEventListener) {\n      return;\n    }\n\n    var eventListener = function eventListener(event) {\n      return handlerRef.current && handlerRef.current(event);\n    };\n\n    targetElement.addEventListener(eventName, eventListener, {\n      capture: options.capture,\n      once: options.once,\n      passive: options.passive\n    });\n    return function () {\n      targetElement.removeEventListener(eventName, eventListener, {\n        capture: options.capture\n      });\n    };\n  }, [eventName, options.target, options.capture, options.once, options.passive]);\n}\n\nexport default useEventListener;","map":{"version":3,"sources":["/Users/brandonliu/Project/goairmart/antd-demo/node_modules/ahooks/es/useEventListener/index.js"],"names":["useEffect","useRef","getTargetElement","useEventListener","eventName","handler","options","handlerRef","current","targetElement","target","window","addEventListener","eventListener","event","capture","once","passive","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,gBAAT,QAAiC,cAAjC;;AAEA,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,OAArC,EAA8CC,OAA9C,EAAuD;AACrD,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAIC,UAAU,GAAGN,MAAM,EAAvB;AACAM,EAAAA,UAAU,CAACC,OAAX,GAAqBH,OAArB;AACAL,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAIS,aAAa,GAAGP,gBAAgB,CAACI,OAAO,CAACI,MAAT,EAAiBC,MAAjB,CAApC;;AAEA,QAAI,CAACF,aAAa,CAACG,gBAAnB,EAAqC;AACnC;AACD;;AAED,QAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAChD,aAAOP,UAAU,CAACC,OAAX,IAAsBD,UAAU,CAACC,OAAX,CAAmBM,KAAnB,CAA7B;AACD,KAFD;;AAIAL,IAAAA,aAAa,CAACG,gBAAd,CAA+BR,SAA/B,EAA0CS,aAA1C,EAAyD;AACvDE,MAAAA,OAAO,EAAET,OAAO,CAACS,OADsC;AAEvDC,MAAAA,IAAI,EAAEV,OAAO,CAACU,IAFyC;AAGvDC,MAAAA,OAAO,EAAEX,OAAO,CAACW;AAHsC,KAAzD;AAKA,WAAO,YAAY;AACjBR,MAAAA,aAAa,CAACS,mBAAd,CAAkCd,SAAlC,EAA6CS,aAA7C,EAA4D;AAC1DE,QAAAA,OAAO,EAAET,OAAO,CAACS;AADyC,OAA5D;AAGD,KAJD;AAKD,GArBQ,EAqBN,CAACX,SAAD,EAAYE,OAAO,CAACI,MAApB,EAA4BJ,OAAO,CAACS,OAApC,EAA6CT,OAAO,CAACU,IAArD,EAA2DV,OAAO,CAACW,OAAnE,CArBM,CAAT;AAsBD;;AAED,eAAed,gBAAf","sourcesContent":["import { useEffect, useRef } from 'react';\nimport { getTargetElement } from '../utils/dom';\n\nfunction useEventListener(eventName, handler, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var handlerRef = useRef();\n  handlerRef.current = handler;\n  useEffect(function () {\n    var targetElement = getTargetElement(options.target, window);\n\n    if (!targetElement.addEventListener) {\n      return;\n    }\n\n    var eventListener = function eventListener(event) {\n      return handlerRef.current && handlerRef.current(event);\n    };\n\n    targetElement.addEventListener(eventName, eventListener, {\n      capture: options.capture,\n      once: options.once,\n      passive: options.passive\n    });\n    return function () {\n      targetElement.removeEventListener(eventName, eventListener, {\n        capture: options.capture\n      });\n    };\n  }, [eventName, options.target, options.capture, options.once, options.passive]);\n}\n\nexport default useEventListener;"]},"metadata":{},"sourceType":"module"}